/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useLayoutEffect } from 'react';
import { useGLTF, useScroll } from '@react-three/drei';
import Queen from '../Queen/Queen';
import Checkboard from '../Checkboard/Checkboard';
import Pawn from '../Pawn/Pawn';
import Rook from '../Rook/Rook';
import { useControls } from 'leva';
import { useFrame, useThree } from '@react-three/fiber';
import { animate, useMotionValue } from 'framer-motion';

export default function Chess(props) {
	const scroll = useScroll();
	const scrollX = useMotionValue(40);
	const scrollY = useMotionValue(15);
	const scrollZ = useMotionValue(30);
	const animateFov = useMotionValue(75);

	let lastPosition = scroll.offset;

	useFrame(async state => {
		if (lastPosition > scroll.offset) {
			animate(scrollY, 15, { duration: 0.5 });
			animate(scrollZ, 30, { duration: 0.5 });
			animate(animateFov, 75, { duration: 0.5 });
			state.camera.position.y = scrollY.get();
			state.camera.position.z = scrollZ.get();
			state.camera.fov = animateFov.get();
			state.camera.lookAt(0, 0, 0);
			state.camera.updateProjectionMatrix();
			// lastPosition = scroll.offset;
		}
		if (lastPosition < scroll.offset) {
			animate(scrollY, 44, { duration: 0.5 });
			animate(scrollZ, 9, { duration: 0.5 });
			animate(animateFov, 35, { duration: 0.5 });
			// state.camera.position.x = scrollX.get();
			state.camera.position.z = scrollZ.get();
			state.camera.position.y = scrollY.get();
			state.camera.fov = animateFov.get();
			state.camera.lookAt(6, -5, 9);
			state.camera.updateProjectionMatrix();
			lastPosition = scroll.offset;
		}
	});

	const { whiteQueenPosition } = useControls('whiteQueen', {
		whiteQueenPosition: {
			value: { x: -0.44, y: 0.18, z: 5.18 },
			step: 0.01,
		},
	});

	const { whitePawnPosition } = useControls('whitePawn', {
		whitePawnPosition: {
			value: { x: -3.28, y: 0.42, z: 4.93 },
			step: 0.01,
		},
	});

	const { nodes, materials } = useGLTF('./checkboard.glb');
	return (
		<>
			<group
				{...props}
				dispose={null}
			>
				<Queen
					positionX={whiteQueenPosition.x}
					positionY={whiteQueenPosition.y}
					positionZ={whiteQueenPosition.z}
				/>
				{/* <mesh
					castShadow
					receiveShadow
					geometry={nodes.Queen_1.geometry}
					material={nodes.Queen_1.material}
					position={[-0.44, 0.18, 5.18]}
				/> */}
				<Checkboard />
				{/* <group position={[-9.14, 0, 3.88]} rotation={[0, 1.56, 0]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube003.geometry}
          material={materials.Checker}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube003_1.geometry}
          material={materials.Material}
        />
      </group> */}
				{/* <mesh
					castShadow
					receiveShadow
					geometry={nodes.Pawn.geometry}
					material={materials['pawn white']}
					position={[-3.28, 0.42, 4.93]}
					rotation={[Math.PI / 2, 0, 0]}
				/> */}
				<Pawn
					positionX={whitePawnPosition.x}
					positionY={whitePawnPosition.y}
					positionZ={whitePawnPosition.z}
				/>
				<Rook />
				{/* <mesh
					castShadow
					receiveShadow
					geometry={nodes.rook.geometry}
					material={nodes.rook.material}
					// position={[0.02, 0.25, -4.82]}
					position={nodes.rook.position}
					scale={0.64}
				/> */}
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.knight_top.geometry}
					material={nodes.knight_top.material}
					position={[0.01, 1.27, -2.27]}
					rotation={[0, -0.03, 0]}
				/>
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Bishop001.geometry}
					material={nodes.Bishop001.material}
					// position={[0, 0.03, 0.12]}
				/>
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.KIng001.geometry}
					material={nodes.KIng001.material}
					position={[-0.42, 0.03, 2.8]}
					// position={nodes.KIng001.position}
					rotation={[0, -1.23, 0]}
				/>
			</group>
			{/* <Text
        characters="abcdefghijklmnopqrstuvwxyz0123456789!"
        position={[0, 10, 0]}
      >
        hello world!
      </Text> */}
		</>
	);
}

useGLTF.preload('./checkboard.glb');
