/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useContext, useEffect, useRef, useState } from 'react';
import {
	useGLTF,
	useScroll,
	Scroll,
	ScrollControls,
	TransformControls,
} from '@react-three/drei';
import Queen from '../Queen/Queen';
import Checkboard from '../Checkboard/Checkboard';
import Pawn from '../Pawn/Pawn';
import Rook from '../Rook/Rook';
import { useControls } from 'leva';
import { useFrame } from '@react-three/fiber';
import BannerPhrase from '../BannerPhrase/BannerPhrase';
import styles from './Chess.module.scss';
import { ThemeContext } from '../Context/ThemeContext';
import gsap from 'gsap';
import Cursor from '../Cursor/Cursor';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { WhiteQueen } from '../WhiteQueen/WhiteQueen';
import { BlackQueen } from '../BlackQueen/BlackQueen';
import { BlackPawn } from '../BlackPawn/BlackPawn';
import { WhitePawn } from '../WhitePawn/WhitePawn';
import { BlackChessCastle } from '../BlackChessCastle/BlackChessCastle';
import { WhiteChessCastle } from '../WhiteChessCastle/WhiteChessCastle';
import { BlackElephant } from '../BlackElephant/BlackElephant';
import { WhiteElephant } from '../WhiteElephant/WhiteElephant';
import { BlackKing } from '../BlackKing/BlackKing';
import { WhiteKing } from '../WhiteKing/WhiteKink';
import { BlackHorse } from '../BlackHorse/BlackHorse';
import { WhiteHorse } from '../WhiteHorse/WhiteHorse';
import { ChessSet } from '../ChessSet/ChessSet';

export default function Chess(props) {
	const scroll = useScroll();
	const [lastPosition, setLastPosition] = useState(0);
	const lightRef = useRef();
	const {
		title,
		setTitle,
		setLoading,
		scrollingDown,
		setScrollingDown,
		prevPath,
		setPrevPath,
	} = useContext(ThemeContext);
	if (prevPath) {
		setScrollingDown(false);
		setPrevPath('');
	}
	const workTitleRef = useRef(null);
	const [isFinished, setIsFinished] = useState(false);
	const isTouchDevice =
		'ontouchstart' in window || navigator.maxTouchPoints > 0;

	useFrame(state => {
		const animation = (y, fov, intensity, isScrollingDown) => {
			gsap.to([state.camera.position, state.camera, lightRef.current], {
				y: y,
				fov: fov,
				intensity: intensity,
				duration: 3,
				onUpdate: () => {
					state.camera.lookAt(0, 0, 0);
					state.camera.updateProjectionMatrix();
				},
			});
			setScrollingDown(isScrollingDown);
		};
		if (!isTouchDevice) {
			if (lastPosition > scroll.offset) {
				animation(15, 50, 0, false);
			}
			if (lastPosition < scroll.offset) {
				animation(37, 15, 15, true);
			}
			setLastPosition(scroll.offset);
		}
	});

	const { whiteQueenPosition } = useControls('whiteQueen', {
		whiteQueenPosition: {
			value: { x: -0.44, y: 0.18, z: 5.18 },
			step: 0.01,
		},
	});

	const { whitePawnPosition } = useControls('whitePawn', {
		whitePawnPosition: {
			value: { x: -3.28, y: 0.42, z: 4.93 },
			step: 0.01,
		},
	});

	const { whiteRightRock } = useControls('whiteRightRock', {
		whiteRightRock: {
			value: {
				x: 0,
				y: 0,
				z: 0,
			},
		},
	});

	const { nodes, materials } = useGLTF('./checkboard.glb');

	const variants = {
		hidden: {
			opacity: 0,
		},
		visible: {
			opacity: 1,
			transition: {
				duration: 1,
			},
		},
	};

	const titleElement = document.querySelector(
		`.${styles.cursor}`,
	) as HTMLElement;

	// useEffect(() => {
	// 	if (!isTouchDevice) {
	// 		window.addEventListener('mousemove', e => {
	// 			workTitleRef.current.style.top = e.clientY + 'px';
	// 			workTitleRef.current.style.left = e.clientX + 'px';
	// 		});
	// 	}
	// }, [title, isTouchDevice]);

	const handleClick = e => {
		e.stopPropagation();
		setTitle(title);
		setLoading(true);
	};

	const ref = useRef();
	return (
		<>
			{/* <ambientLight
				ref={lightRef}
				// intensity={isTouchDevice ? 1 : 0}
				intensity={15}
			/> */}
			<TransformControls object={ref} />
			<directionalLight
				position={[0, 5, 0]}
				intensity={25}
			/>
			<Scroll html>
				<BannerPhrase
					bannerPhrase={["LET'S", 'BUILD THE SITE', 'OF THE FUTURE']}
					setIsFinished={setIsFinished}
					scrollingDown={scrollingDown}
					isTouchDevice={isTouchDevice}
				/>

				{!isTouchDevice && (
					<Cursor
						title={title}
						isFinished={isFinished}
					/>
				)}
			</Scroll>

			{/* <group
				{...props}
				dispose={null}
			>
			

				<Checkboard scrollingDown={scrollingDown} />
				<BlackPawn />
				<WhitePawn />
				<WhiteChessCastle
					positionX={whiteRightRock.x}
					positionY={whiteRightRock.y}
					positionZ={whiteRightRock.z}
				/>
				<WhiteChessCastle
					positionX={3.7}
					positionY={4.89}
					positionZ={16.03}
				/>
				<BlackElephant />
				<WhiteElephant />
				<BlackKing />
				<WhiteKing />
				<BlackHorse />
				<WhiteHorse />
				
				<Rook />
				
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.knight_top.geometry}
					material={nodes.knight_top.material}
					position={[0.01, 1.27, -2.27]}
					rotation={[0, -0.03, 0]}
				/>
				<WhiteQueen />
				<BlackQueen />
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.KIng001.geometry}
					material={nodes.KIng001.material}
					position={[-0.42, 0.03, 2.8]}
					// position={nodes.KIng001.position}
					rotation={[0, -1.23, 0]}
				/>
			</group> */}

			<ChessSet />
		</>
	);
}

useGLTF.preload('./checkboard.glb');
