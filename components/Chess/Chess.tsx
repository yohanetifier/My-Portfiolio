/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useContext, useRef, useState } from 'react';
import {
	useGLTF,
	useScroll,
	Scroll,
	TransformControls,
} from '@react-three/drei';
import { useFrame } from '@react-three/fiber';
import BannerPhrase from '../BannerPhrase/BannerPhrase';
import { ThemeContext } from '../Context/ThemeContext';
import gsap from 'gsap';
import { ChessSet } from '../ChessSet/ChessSet';

export default function Chess(props) {
	const scroll = useScroll();
	const [lastPosition, setLastPosition] = useState(0);
	const lightRef = useRef();
	const { scrollingDown, setScrollingDown } = useContext(ThemeContext);
	// if (prevPath) {
	// 	setScrollingDown(false);
	// 	// setPrevPath('');
	// }
	const [isFinished, setIsFinished] = useState(false);
	const isTouchDevice =
		'ontouchstart' in window || navigator.maxTouchPoints > 0;

	useFrame(state => {
		const animation = (y, fov, intensity, isScrollingDown) => {
			gsap.to([state.camera.position, state.camera, lightRef.current], {
				y: y,
				fov: fov,
				intensity: intensity,
				duration: 3,
				onUpdate: () => {
					state.camera.lookAt(0, 0, 0);
					state.camera.updateProjectionMatrix();
				},
			});
			setScrollingDown(isScrollingDown);
		};
		if (!isTouchDevice) {
			if (lastPosition > scroll.offset) {
				animation(15, 50, 0, false);
			}
			if (lastPosition < scroll.offset) {
				animation(37, 15, 15, true);
			}
			setLastPosition(scroll.offset);
		}
	});

	const ref = useRef();
	return (
		<>
			<TransformControls object={ref} />
			<directionalLight
				{...props}
				position={[0, 5, 0]}
				intensity={25}
			/>
			<Scroll html>
				<BannerPhrase
					bannerPhrase={["LET'S", 'BUILD THE SITE', 'OF THE FUTURE']}
					setIsFinished={setIsFinished}
					scrollingDown={scrollingDown}
					isTouchDevice={isTouchDevice}
				/>
			</Scroll>

			<ChessSet />
		</>
	);
}

useGLTF.preload('./checkboard.glb');
